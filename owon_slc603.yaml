blueprint:
  name: Owon SLC603 - Light intensity switch
  description: Turn lights on and set different levels of brightness and temperature.
  domain: automation
  input:
    integration:
      name: (Required) Integration
      description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
      selector:
        select:
          options:
            - ZHA
            - Zigbee2MQTT
    controller_device:
      name: (ZHA) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with ZHA.
      default: ''
      selector:
        device:
    controller_entity:
      name: (Zigbee2MQTT) Controller Entity
      description: The action sensor of the controller to use for the automation. Choose a value only if the remote is integrated with Zigbee2MQTT.
      default: ''
      selector:
        entity:
          domain: sensor
    # inputs for custom actions
    action_button_on_toggle:
      name: (Optional) On button toggle
      description: Action to run on on button toggle.
      default: []
      selector:
        action:
    action_button_up_brightness:
      name: (Optional) Up button brightness
      description: Action to run on up brightness turn.
      default: []
      selector:
        action:
    action_button_down_brightness:
      name: (Optional) Down button brightness
      description: Action to run on down brightness turn.
      default: []
      selector:
        action:
    action_button_up_temperature:
      name: (Optional) Up button temperature
      description: Action to run on up temperature turn.
      default: []
      selector:
        action:
    action_button_down_temperature:
      name: (Optional) Down button temperature
      description: Action to run on down temperature turn.
      default: []
      selector:
        action:
    helper_debounce_delay:
      name: (Optional) Helper - Debounce delay
      description:
        Delay used for debouncing RAW controller events, by default set to 0. A value of 0 disables the debouncing feature. Increase this value if you notice custom actions or linked Hooks running multiple times when interacting with the device. When the controller needs to be debounced,
        usually a value of 100 is enough to remove all duplicate events.
      default: 0
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: milliseconds
          mode: box
          step: 10
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration: !input integration
  # integration id used to select items in the action mapping
  integration_id: '{{ integration | lower }}'
  actions_mapping:
    zha:
      button_on_toggle: [toggle]
      button_up_brightness: [step_with_on_off]
      button_down_brightness: [step]
      button_temperature: [step_color_temp]
    zigbee2mqtt:
      button_on_toggle: [toggle]
      button_up_brightness: [step_with_on_off]
      button_down_brightness: [step]
      button_temperature: [step_color_temp]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_on_toggle: '{{ actions_mapping[integration_id]["button_on_toggle"] }}'
  button_up_brightness: '{{ actions_mapping[integration_id]["button_up_brightness"] }}'
  button_down_brightness: '{{ actions_mapping[integration_id]["button_down_brightness"] }}'
  button_temperature: '{{ actions_mapping[integration_id]["button_temperature"] }}'

  # build data to send within a controller event
  controller_entity: !input controller_entity
  controller_device: !input controller_device
  controller_id: '{% if integration_id=="zigbee2mqtt" %}{{controller_entity}}{% else %}{{controller_device}}{% endif %}'
mode: restart
max_exceeded: silent
trigger:
  # trigger for zigbee2mqtt
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity
  # trigger for other integrations
  - platform: event
    event_type:
      - zha_event
    event_data:
      device_id: !input controller_device
condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.event.data.new_state.state }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
      # only for zigbee2mqtt, check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
      - '{{ integration_id != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
action:
  # debouncing - when automation is triggered multiple times, the last automation run is the one which completes execution, due to mode restart
  # therefore previous runs must wait for the debounce delay before executing any other action
  # if the delay expires and the automation is still running it means it's the last run and execution can continue
  - delay:
      milliseconds: !input helper_debounce_delay
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      args: '{{ trigger.event.data.args }}'
      trigger_action: >-
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.event.data.new_state.state }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}
        {%- endif -%}
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string in button_on_toggle }}'
        sequence: !input action_button_on_toggle
      - conditions: '{{ trigger_action | string in button_up_brightness }}'
        sequence: !input action_button_up_brightness
      - conditions: '{{ trigger_action | string in button_down_brightness }}'
        sequence: !input action_button_down_brightness
      - conditions: '{{ trigger_action | string in button_temperature }}'
        sequence:
          - choose:
              - conditions: '{{ args == [1, 15, 5, 0, 0] }}'
                sequence: !input action_button_up_temperature
            default:
              - choose:
                  - conditions: []
                    sequence: !input action_button_down_temperature